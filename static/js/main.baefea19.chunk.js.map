{"version":3,"sources":["components/Random.js","App.js","reportWebVitals.js","index.js"],"names":["Random","useState","min","setMin","max","setMax","random","setRandom","className","value","onChange","e","target","type","onClick","Math","floor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA+CeA,EA1CA,WAAO,IAAD,EAECC,mBAAS,GAFV,mBAEdC,EAFc,KAETC,EAFS,OAGCF,mBAAS,IAHV,mBAGdG,EAHc,KAGTC,EAHS,OAIOJ,mBAAS,GAJhB,mBAIdK,EAJc,KAINC,EAJM,KAYrB,OACA,sBAAKC,UAAU,YAAf,UAEI,+CAEA,sBAAKA,UAAU,OAAf,UAEI,qBAAKA,UAAU,SAAf,SACI,wCAAU,+BAAOF,SAGrB,sBAAKE,UAAU,SAAf,UACI,uBAAOC,MAAOP,EAAKQ,SAAU,SAAAC,GAAC,OAAGR,GAAQQ,EAAEC,OAAOH,QAAQI,KAAK,WAC/D,uBAAOJ,MAAOL,EAAKM,SAAU,SAAAC,GAAC,OAAGN,GAAQM,EAAEC,OAAOH,QAAQI,KAAK,cAKnE,wBAAQC,QAtBG,WACnBP,EAAUQ,KAAKC,MAAMD,KAAKT,UAAYF,EAAMF,EAAK,GAAIA,KAqB7C,wCCxBOe,MARf,WACE,OACE,qBAAKT,UAAU,MAAf,SACC,cAAC,EAAD,OCMUU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.baefea19.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\n\r\n\r\nconst Random = () => {\r\n\r\nconst [min, setMin] = useState(0);\r\nconst [max, setMax] = useState(10);\r\nconst [random, setRandom] = useState(5);\r\n\r\n\r\n\r\nconst randomizer = () => {\r\nsetRandom(Math.floor(Math.random() * (max - min +1) +min));\r\n}\r\n\r\nreturn (\r\n<div className=\"container\">\r\n\r\n    <h1>RANDOM NUMBER</h1>\r\n\r\n    <div className=\"card\">\r\n\r\n        <div className=\"number\">\r\n            <p>NUMBER <span>{random}</span></p>\r\n        </div>\r\n\r\n        <div className=\"column\">\r\n            <input value={min} onChange={e=> setMin(+e.target.value)} type=\"number\" />\r\n            <input value={max} onChange={e=> setMax(+e.target.value)} type=\"number\" />\r\n\r\n        </div>\r\n\r\n\r\n        <button onClick={randomizer}>Get A Random Number</button>\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n</div>\r\n);\r\n}\r\n\r\n\r\nexport default Random;","import './App.css';\nimport Random from './components/Random'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Random/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}